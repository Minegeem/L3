Terminals unused in grammar

    BYTE
    COMP


Grammar

    0 $accept: Prog $end

    1 Prog: DeclVars DeclFoncts

    2 DeclVars: DeclVars TYPE Declarateurs ';'
    3         | ε

    4 DeclVars2: DeclVars2 Static TYPE Declarateurs ';'
    5          | ε

    6 Static: STATIC
    7       | ε

    8 Declarateurs: Declarateurs ',' IDENT
    9             | IDENT

   10 DeclFoncts: DeclFonct
   11           | DeclFoncts DeclFonct

   12 DeclFonct: EnTeteFonct Corps

   13 EnTeteFonct: TYPE IDENT '(' Parametres ')'
   14            | VOID IDENT '(' Parametres ')'

   15 Parametres: VOID
   16           | ListTypVar

   17 ListTypVar: ListTypVar ',' TYPE IDENT
   18           | TYPE IDENT

   19 Corps: '{' DeclVars2 SuiteInstr '}'

   20 SuiteInstr: SuiteInstr Instr
   21           | ε

   22 Instr: IDENT '=' Exp ';'
   23      | IF '(' Exp ')' Instr
   24      | IF '(' Exp ')' Instr ELSE Instr
   25      | WHILE '(' Exp ')' Instr
   26      | IDENT '(' Arguments ')' ';'
   27      | RETURN Exp ';'
   28      | RETURN ';'
   29      | '{' SuiteInstr '}'
   30      | ';'

   31 Exp: Exp OR TB
   32    | TB

   33 TB: TB AND FB
   34   | FB

   35 FB: FB EQ M
   36   | M

   37 M: M ORDER E
   38  | E

   39 E: E ADDSUB T
   40  | T

   41 T: T DIVSTAR F
   42  | F

   43 F: ADDSUB F
   44  | '!' F
   45  | '(' Exp ')'
   46  | NUM
   47  | CHARACTER
   48  | IDENT
   49  | IDENT '(' Arguments ')'

   50 Arguments: ListExp
   51          | ε

   52 ListExp: ListExp ',' Exp
   53        | Exp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 44
    '(' (40) 13 14 23 24 25 26 45 49
    ')' (41) 13 14 23 24 25 26 45 49
    ',' (44) 8 17 52
    ';' (59) 2 4 22 26 27 28 30
    '=' (61) 22
    '{' (123) 19 29
    '}' (125) 19 29
    error (256)
    NOELSE (258)
    BYTE <byte> (259)
    CHARACTER <byte> (260) 47
    ADDSUB <byte> (261) 39 43
    DIVSTAR <byte> (262) 41
    NUM <num> (263) 46
    IDENT <ident> (264) 8 9 13 14 17 18 22 26 48 49
    IF <ident> (265) 23 24
    ELSE <ident> (266) 24
    WHILE <ident> (267) 25
    RETURN <ident> (268) 27 28
    VOID <ident> (269) 14 15
    TYPE <ident> (270) 2 4 13 17 18
    STATIC <ident> (271) 6
    AND <ident> (272) 33
    OR <ident> (273) 31
    ORDER <comp> (274) 37
    EQ <comp> (275) 35
    COMP <comp> (276)


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Prog <node> (31)
        on left: 1
        on right: 0
    DeclVars <node> (32)
        on left: 2 3
        on right: 1 2
    DeclVars2 <node> (33)
        on left: 4 5
        on right: 4 19
    Static <node> (34)
        on left: 6 7
        on right: 4
    Declarateurs <node> (35)
        on left: 8 9
        on right: 2 4 8
    DeclFoncts <node> (36)
        on left: 10 11
        on right: 1 11
    DeclFonct <node> (37)
        on left: 12
        on right: 10 11
    EnTeteFonct <node> (38)
        on left: 13 14
        on right: 12
    Parametres <node> (39)
        on left: 15 16
        on right: 13 14
    ListTypVar <node> (40)
        on left: 17 18
        on right: 16 17
    Corps <node> (41)
        on left: 19
        on right: 12
    SuiteInstr <node> (42)
        on left: 20 21
        on right: 19 20 29
    Instr <node> (43)
        on left: 22 23 24 25 26 27 28 29 30
        on right: 20 23 24 25
    Exp <node> (44)
        on left: 31 32
        on right: 22 23 24 25 27 31 45 52 53
    TB <node> (45)
        on left: 33 34
        on right: 31 32 33
    FB <node> (46)
        on left: 35 36
        on right: 33 34 35
    M <node> (47)
        on left: 37 38
        on right: 35 36 37
    E <node> (48)
        on left: 39 40
        on right: 37 38 39
    T <node> (49)
        on left: 41 42
        on right: 39 40 41
    F <node> (50)
        on left: 43 44 45 46 47 48 49
        on right: 41 42 43 44
    Arguments <node> (51)
        on left: 50 51
        on right: 26 49
    ListExp <node> (52)
        on left: 52 53
        on right: 50 52


State 0

    0 $accept: • Prog $end
    1 Prog: • DeclVars DeclFoncts
    2 DeclVars: • DeclVars TYPE Declarateurs ';'
    3         | ε •

    $default  reduce using rule 3 (DeclVars)

    Prog      go to state 1
    DeclVars  go to state 2


State 1

    0 $accept: Prog • $end

    $end  shift, and go to state 3


State 2

    1 Prog: DeclVars • DeclFoncts
    2 DeclVars: DeclVars • TYPE Declarateurs ';'
   10 DeclFoncts: • DeclFonct
   11           | • DeclFoncts DeclFonct
   12 DeclFonct: • EnTeteFonct Corps
   13 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   14            | • VOID IDENT '(' Parametres ')'

    VOID  shift, and go to state 4
    TYPE  shift, and go to state 5

    DeclFoncts   go to state 6
    DeclFonct    go to state 7
    EnTeteFonct  go to state 8


State 3

    0 $accept: Prog $end •

    $default  accept


State 4

   14 EnTeteFonct: VOID • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 9


State 5

    2 DeclVars: DeclVars TYPE • Declarateurs ';'
    8 Declarateurs: • Declarateurs ',' IDENT
    9             | • IDENT
   13 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 10

    Declarateurs  go to state 11


State 6

    1 Prog: DeclVars DeclFoncts •  [$end]
   11 DeclFoncts: DeclFoncts • DeclFonct
   12 DeclFonct: • EnTeteFonct Corps
   13 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   14            | • VOID IDENT '(' Parametres ')'

    VOID  shift, and go to state 4
    TYPE  shift, and go to state 12

    $default  reduce using rule 1 (Prog)

    DeclFonct    go to state 13
    EnTeteFonct  go to state 8


State 7

   10 DeclFoncts: DeclFonct •

    $default  reduce using rule 10 (DeclFoncts)


State 8

   12 DeclFonct: EnTeteFonct • Corps
   19 Corps: • '{' DeclVars2 SuiteInstr '}'

    '{'  shift, and go to state 14

    Corps  go to state 15


State 9

   14 EnTeteFonct: VOID IDENT • '(' Parametres ')'

    '('  shift, and go to state 16


State 10

    9 Declarateurs: IDENT •  [';', ',']
   13 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 17

    $default  reduce using rule 9 (Declarateurs)


State 11

    2 DeclVars: DeclVars TYPE Declarateurs • ';'
    8 Declarateurs: Declarateurs • ',' IDENT

    ';'  shift, and go to state 18
    ','  shift, and go to state 19


State 12

   13 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 20


State 13

   11 DeclFoncts: DeclFoncts DeclFonct •

    $default  reduce using rule 11 (DeclFoncts)


State 14

    4 DeclVars2: • DeclVars2 Static TYPE Declarateurs ';'
    5          | ε •
   19 Corps: '{' • DeclVars2 SuiteInstr '}'

    $default  reduce using rule 5 (DeclVars2)

    DeclVars2  go to state 21


State 15

   12 DeclFonct: EnTeteFonct Corps •

    $default  reduce using rule 12 (DeclFonct)


State 16

   14 EnTeteFonct: VOID IDENT '(' • Parametres ')'
   15 Parametres: • VOID
   16           | • ListTypVar
   17 ListTypVar: • ListTypVar ',' TYPE IDENT
   18           | • TYPE IDENT

    VOID  shift, and go to state 22
    TYPE  shift, and go to state 23

    Parametres  go to state 24
    ListTypVar  go to state 25


State 17

   13 EnTeteFonct: TYPE IDENT '(' • Parametres ')'
   15 Parametres: • VOID
   16           | • ListTypVar
   17 ListTypVar: • ListTypVar ',' TYPE IDENT
   18           | • TYPE IDENT

    VOID  shift, and go to state 22
    TYPE  shift, and go to state 23

    Parametres  go to state 26
    ListTypVar  go to state 25


State 18

    2 DeclVars: DeclVars TYPE Declarateurs ';' •

    $default  reduce using rule 2 (DeclVars)


State 19

    8 Declarateurs: Declarateurs ',' • IDENT

    IDENT  shift, and go to state 27


State 20

   13 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 17


State 21

    4 DeclVars2: DeclVars2 • Static TYPE Declarateurs ';'
    6 Static: • STATIC
    7       | ε •  [TYPE]
   19 Corps: '{' DeclVars2 • SuiteInstr '}'
   20 SuiteInstr: • SuiteInstr Instr
   21           | ε •  [IDENT, IF, WHILE, RETURN, ';', '{', '}']

    STATIC  shift, and go to state 28

    TYPE      reduce using rule 7 (Static)
    $default  reduce using rule 21 (SuiteInstr)

    Static      go to state 29
    SuiteInstr  go to state 30


State 22

   15 Parametres: VOID •

    $default  reduce using rule 15 (Parametres)


State 23

   18 ListTypVar: TYPE • IDENT

    IDENT  shift, and go to state 31


State 24

   14 EnTeteFonct: VOID IDENT '(' Parametres • ')'

    ')'  shift, and go to state 32


State 25

   16 Parametres: ListTypVar •  [')']
   17 ListTypVar: ListTypVar • ',' TYPE IDENT

    ','  shift, and go to state 33

    $default  reduce using rule 16 (Parametres)


State 26

   13 EnTeteFonct: TYPE IDENT '(' Parametres • ')'

    ')'  shift, and go to state 34


State 27

    8 Declarateurs: Declarateurs ',' IDENT •

    $default  reduce using rule 8 (Declarateurs)


State 28

    6 Static: STATIC •

    $default  reduce using rule 6 (Static)


State 29

    4 DeclVars2: DeclVars2 Static • TYPE Declarateurs ';'

    TYPE  shift, and go to state 35


State 30

   19 Corps: '{' DeclVars2 SuiteInstr • '}'
   20 SuiteInstr: SuiteInstr • Instr
   22 Instr: • IDENT '=' Exp ';'
   23      | • IF '(' Exp ')' Instr
   24      | • IF '(' Exp ')' Instr ELSE Instr
   25      | • WHILE '(' Exp ')' Instr
   26      | • IDENT '(' Arguments ')' ';'
   27      | • RETURN Exp ';'
   28      | • RETURN ';'
   29      | • '{' SuiteInstr '}'
   30      | • ';'

    IDENT   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 42

    Instr  go to state 43


State 31

   18 ListTypVar: TYPE IDENT •

    $default  reduce using rule 18 (ListTypVar)


State 32

   14 EnTeteFonct: VOID IDENT '(' Parametres ')' •

    $default  reduce using rule 14 (EnTeteFonct)


State 33

   17 ListTypVar: ListTypVar ',' • TYPE IDENT

    TYPE  shift, and go to state 44


State 34

   13 EnTeteFonct: TYPE IDENT '(' Parametres ')' •

    $default  reduce using rule 13 (EnTeteFonct)


State 35

    4 DeclVars2: DeclVars2 Static TYPE • Declarateurs ';'
    8 Declarateurs: • Declarateurs ',' IDENT
    9             | • IDENT

    IDENT  shift, and go to state 45

    Declarateurs  go to state 46


State 36

   22 Instr: IDENT • '=' Exp ';'
   26      | IDENT • '(' Arguments ')' ';'

    '('  shift, and go to state 47
    '='  shift, and go to state 48


State 37

   23 Instr: IF • '(' Exp ')' Instr
   24      | IF • '(' Exp ')' Instr ELSE Instr

    '('  shift, and go to state 49


State 38

   25 Instr: WHILE • '(' Exp ')' Instr

    '('  shift, and go to state 50


State 39

   27 Instr: RETURN • Exp ';'
   28      | RETURN • ';'
   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    ';'        shift, and go to state 55
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 58
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 40

   30 Instr: ';' •

    $default  reduce using rule 30 (Instr)


State 41

   20 SuiteInstr: • SuiteInstr Instr
   21           | ε •
   29 Instr: '{' • SuiteInstr '}'

    $default  reduce using rule 21 (SuiteInstr)

    SuiteInstr  go to state 65


State 42

   19 Corps: '{' DeclVars2 SuiteInstr '}' •

    $default  reduce using rule 19 (Corps)


State 43

   20 SuiteInstr: SuiteInstr Instr •

    $default  reduce using rule 20 (SuiteInstr)


State 44

   17 ListTypVar: ListTypVar ',' TYPE • IDENT

    IDENT  shift, and go to state 66


State 45

    9 Declarateurs: IDENT •

    $default  reduce using rule 9 (Declarateurs)


State 46

    4 DeclVars2: DeclVars2 Static TYPE Declarateurs • ';'
    8 Declarateurs: Declarateurs • ',' IDENT

    ';'  shift, and go to state 67
    ','  shift, and go to state 19


State 47

   26 Instr: IDENT '(' • Arguments ')' ';'
   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'
   50 Arguments: • ListExp
   51          | ε •  [')']
   52 ListExp: • ListExp ',' Exp
   53        | • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    $default  reduce using rule 51 (Arguments)

    Exp        go to state 68
    TB         go to state 59
    FB         go to state 60
    M          go to state 61
    E          go to state 62
    T          go to state 63
    F          go to state 64
    Arguments  go to state 69
    ListExp    go to state 70


State 48

   22 Instr: IDENT '=' • Exp ';'
   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 71
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 49

   23 Instr: IF '(' • Exp ')' Instr
   24      | IF '(' • Exp ')' Instr ELSE Instr
   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 72
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 50

   25 Instr: WHILE '(' • Exp ')' Instr
   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 73
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 51

   47 F: CHARACTER •

    $default  reduce using rule 47 (F)


State 52

   43 F: • ADDSUB F
   43  | ADDSUB • F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F  go to state 74


State 53

   46 F: NUM •

    $default  reduce using rule 46 (F)


State 54

   48 F: IDENT •  [ADDSUB, DIVSTAR, AND, OR, ORDER, EQ, ';', ',', ')']
   49  | IDENT • '(' Arguments ')'

    '('  shift, and go to state 75

    $default  reduce using rule 48 (F)


State 55

   28 Instr: RETURN ';' •

    $default  reduce using rule 28 (Instr)


State 56

   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   45  | '(' • Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 76
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 57

   43 F: • ADDSUB F
   44  | • '!' F
   44  | '!' • F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F  go to state 77


State 58

   27 Instr: RETURN Exp • ';'
   31 Exp: Exp • OR TB

    OR   shift, and go to state 78
    ';'  shift, and go to state 79


State 59

   32 Exp: TB •  [OR, ';', ',', ')']
   33 TB: TB • AND FB

    AND  shift, and go to state 80

    $default  reduce using rule 32 (Exp)


State 60

   34 TB: FB •  [AND, OR, ';', ',', ')']
   35 FB: FB • EQ M

    EQ  shift, and go to state 81

    $default  reduce using rule 34 (TB)


State 61

   36 FB: M •  [AND, OR, EQ, ';', ',', ')']
   37 M: M • ORDER E

    ORDER  shift, and go to state 82

    $default  reduce using rule 36 (FB)


State 62

   38 M: E •  [AND, OR, ORDER, EQ, ';', ',', ')']
   39 E: E • ADDSUB T

    ADDSUB  shift, and go to state 83

    $default  reduce using rule 38 (M)


State 63

   40 E: T •  [ADDSUB, AND, OR, ORDER, EQ, ';', ',', ')']
   41 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 84

    $default  reduce using rule 40 (E)


State 64

   42 T: F •

    $default  reduce using rule 42 (T)


State 65

   20 SuiteInstr: SuiteInstr • Instr
   22 Instr: • IDENT '=' Exp ';'
   23      | • IF '(' Exp ')' Instr
   24      | • IF '(' Exp ')' Instr ELSE Instr
   25      | • WHILE '(' Exp ')' Instr
   26      | • IDENT '(' Arguments ')' ';'
   27      | • RETURN Exp ';'
   28      | • RETURN ';'
   29      | • '{' SuiteInstr '}'
   29      | '{' SuiteInstr • '}'
   30      | • ';'

    IDENT   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 85

    Instr  go to state 43


State 66

   17 ListTypVar: ListTypVar ',' TYPE IDENT •

    $default  reduce using rule 17 (ListTypVar)


State 67

    4 DeclVars2: DeclVars2 Static TYPE Declarateurs ';' •

    $default  reduce using rule 4 (DeclVars2)


State 68

   31 Exp: Exp • OR TB
   53 ListExp: Exp •  [',', ')']

    OR  shift, and go to state 78

    $default  reduce using rule 53 (ListExp)


State 69

   26 Instr: IDENT '(' Arguments • ')' ';'

    ')'  shift, and go to state 86


State 70

   50 Arguments: ListExp •  [')']
   52 ListExp: ListExp • ',' Exp

    ','  shift, and go to state 87

    $default  reduce using rule 50 (Arguments)


State 71

   22 Instr: IDENT '=' Exp • ';'
   31 Exp: Exp • OR TB

    OR   shift, and go to state 78
    ';'  shift, and go to state 88


State 72

   23 Instr: IF '(' Exp • ')' Instr
   24      | IF '(' Exp • ')' Instr ELSE Instr
   31 Exp: Exp • OR TB

    OR   shift, and go to state 78
    ')'  shift, and go to state 89


State 73

   25 Instr: WHILE '(' Exp • ')' Instr
   31 Exp: Exp • OR TB

    OR   shift, and go to state 78
    ')'  shift, and go to state 90


State 74

   43 F: ADDSUB F •

    $default  reduce using rule 43 (F)


State 75

   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'
   49  | IDENT '(' • Arguments ')'
   50 Arguments: • ListExp
   51          | ε •  [')']
   52 ListExp: • ListExp ',' Exp
   53        | • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    $default  reduce using rule 51 (Arguments)

    Exp        go to state 68
    TB         go to state 59
    FB         go to state 60
    M          go to state 61
    E          go to state 62
    T          go to state 63
    F          go to state 64
    Arguments  go to state 91
    ListExp    go to state 70


State 76

   31 Exp: Exp • OR TB
   45 F: '(' Exp • ')'

    OR   shift, and go to state 78
    ')'  shift, and go to state 92


State 77

   44 F: '!' F •

    $default  reduce using rule 44 (F)


State 78

   31 Exp: Exp OR • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    TB  go to state 93
    FB  go to state 60
    M   go to state 61
    E   go to state 62
    T   go to state 63
    F   go to state 64


State 79

   27 Instr: RETURN Exp ';' •

    $default  reduce using rule 27 (Instr)


State 80

   33 TB: TB AND • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    FB  go to state 94
    M   go to state 61
    E   go to state 62
    T   go to state 63
    F   go to state 64


State 81

   35 FB: FB EQ • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    M  go to state 95
    E  go to state 62
    T  go to state 63
    F  go to state 64


State 82

   37 M: M ORDER • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    E  go to state 96
    T  go to state 63
    F  go to state 64


State 83

   39 E: E ADDSUB • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    T  go to state 97
    F  go to state 64


State 84

   41 T: T DIVSTAR • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F  go to state 98


State 85

   29 Instr: '{' SuiteInstr '}' •

    $default  reduce using rule 29 (Instr)


State 86

   26 Instr: IDENT '(' Arguments ')' • ';'

    ';'  shift, and go to state 99


State 87

   31 Exp: • Exp OR TB
   32    | • TB
   33 TB: • TB AND FB
   34   | • FB
   35 FB: • FB EQ M
   36   | • M
   37 M: • M ORDER E
   38  | • E
   39 E: • E ADDSUB T
   40  | • T
   41 T: • T DIVSTAR F
   42  | • F
   43 F: • ADDSUB F
   44  | • '!' F
   45  | • '(' Exp ')'
   46  | • NUM
   47  | • CHARACTER
   48  | • IDENT
   49  | • IDENT '(' Arguments ')'
   52 ListExp: ListExp ',' • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp  go to state 100
    TB   go to state 59
    FB   go to state 60
    M    go to state 61
    E    go to state 62
    T    go to state 63
    F    go to state 64


State 88

   22 Instr: IDENT '=' Exp ';' •

    $default  reduce using rule 22 (Instr)


State 89

   22 Instr: • IDENT '=' Exp ';'
   23      | • IF '(' Exp ')' Instr
   23      | IF '(' Exp ')' • Instr
   24      | • IF '(' Exp ')' Instr ELSE Instr
   24      | IF '(' Exp ')' • Instr ELSE Instr
   25      | • WHILE '(' Exp ')' Instr
   26      | • IDENT '(' Arguments ')' ';'
   27      | • RETURN Exp ';'
   28      | • RETURN ';'
   29      | • '{' SuiteInstr '}'
   30      | • ';'

    IDENT   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr  go to state 101


State 90

   22 Instr: • IDENT '=' Exp ';'
   23      | • IF '(' Exp ')' Instr
   24      | • IF '(' Exp ')' Instr ELSE Instr
   25      | • WHILE '(' Exp ')' Instr
   25      | WHILE '(' Exp ')' • Instr
   26      | • IDENT '(' Arguments ')' ';'
   27      | • RETURN Exp ';'
   28      | • RETURN ';'
   29      | • '{' SuiteInstr '}'
   30      | • ';'

    IDENT   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr  go to state 102


State 91

   49 F: IDENT '(' Arguments • ')'

    ')'  shift, and go to state 103


State 92

   45 F: '(' Exp ')' •

    $default  reduce using rule 45 (F)


State 93

   31 Exp: Exp OR TB •  [OR, ';', ',', ')']
   33 TB: TB • AND FB

    AND  shift, and go to state 80

    $default  reduce using rule 31 (Exp)


State 94

   33 TB: TB AND FB •  [AND, OR, ';', ',', ')']
   35 FB: FB • EQ M

    EQ  shift, and go to state 81

    $default  reduce using rule 33 (TB)


State 95

   35 FB: FB EQ M •  [AND, OR, EQ, ';', ',', ')']
   37 M: M • ORDER E

    ORDER  shift, and go to state 82

    $default  reduce using rule 35 (FB)


State 96

   37 M: M ORDER E •  [AND, OR, ORDER, EQ, ';', ',', ')']
   39 E: E • ADDSUB T

    ADDSUB  shift, and go to state 83

    $default  reduce using rule 37 (M)


State 97

   39 E: E ADDSUB T •  [ADDSUB, AND, OR, ORDER, EQ, ';', ',', ')']
   41 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 84

    $default  reduce using rule 39 (E)


State 98

   41 T: T DIVSTAR F •

    $default  reduce using rule 41 (T)


State 99

   26 Instr: IDENT '(' Arguments ')' ';' •

    $default  reduce using rule 26 (Instr)


State 100

   31 Exp: Exp • OR TB
   52 ListExp: ListExp ',' Exp •  [',', ')']

    OR  shift, and go to state 78

    $default  reduce using rule 52 (ListExp)


State 101

   23 Instr: IF '(' Exp ')' Instr •  [IDENT, IF, WHILE, RETURN, ';', '{', '}']
   24      | IF '(' Exp ')' Instr • ELSE Instr

    ELSE  shift, and go to state 104

    $default  reduce using rule 23 (Instr)

    Conflict between rule 23 and token ELSE resolved as shift (NOELSE < ELSE).


State 102

   25 Instr: WHILE '(' Exp ')' Instr •

    $default  reduce using rule 25 (Instr)


State 103

   49 F: IDENT '(' Arguments ')' •

    $default  reduce using rule 49 (F)


State 104

   22 Instr: • IDENT '=' Exp ';'
   23      | • IF '(' Exp ')' Instr
   24      | • IF '(' Exp ')' Instr ELSE Instr
   24      | IF '(' Exp ')' Instr ELSE • Instr
   25      | • WHILE '(' Exp ')' Instr
   26      | • IDENT '(' Arguments ')' ';'
   27      | • RETURN Exp ';'
   28      | • RETURN ';'
   29      | • '{' SuiteInstr '}'
   30      | • ';'

    IDENT   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr  go to state 105


State 105

   24 Instr: IF '(' Exp ')' Instr ELSE Instr •

    $default  reduce using rule 24 (Instr)
